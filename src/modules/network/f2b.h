//This code was autogenerated by ESP Mango code generator V1.2 for "sketch_espmango" sketch at: 25-08-2024 22:20:24
//ESP Mango code generator was created by Julian D. Medina --- JulianDM1995@gmail.com - 2020 

#include "conn_evt.h"
#include <EEPROM.h>
#include "../dht/dhtmod.h"
#include "../waterLevel/waterLevel.h"
#include "../bulbLigth/bulbLigth.h"
#include "../ds18b20/ds18b20.h"
#include "../fancooler/fancooler.h"
//==================================================================================================================================
//------------------------------------------------| Frontend to Backend functions |-------------------------------------------------
//==================================================================================================================================

/*In Javascript add: " sendReqOFWiFiCredentials(); " 
	to call this function in Arduino Backend. */
void sendReqOFWiFiCredentials() {

	//-----------------------------|  Debugging print. Remove if you want.  |-----------------------------
	if (FrontendToBackendDebug) {
		Serial.println("Executing \"sendReqOFWiFiCredentials\"");
	}
	//-----------------------------------------------| ~ |------------------------------------------------

	//Write your own code for "sendReqOFWiFiCredentials" here. Code inside this comments will not overwrite. DON'T EDIT OR REMOVE THIS COMMENTS. 	Code: crtuukbyyi
	struct ssidList sl[20];
	int totalNet = wifi_scanSSID(sl, 20);
	for( int i = 0; i < totalNet; i++ )
	{
		Serial.print("SSID: ");
		Serial.print(sl[i].ssid);
		Serial.print(" , ");
		Serial.print("RSSI: ");
		Serial.println(sl[i].rssi);
	}
	respondReqOFWiFiCredentials( sl, totalNet);
	//End of your own code. 	Code: crtuukbyyi

}


/*In Javascript add: " sendCredentialsToServer(); " 
	to call this function in Arduino Backend. */
void sendCredentialsToServer(JsonObject params) {

	//-----------------------------|  Debugging print. Remove if you want.  |-----------------------------
	if (FrontendToBackendDebug) {
		Serial.println("Executing \"sendCredentialsToServer\"");
	}
	//-----------------------------------------------| ~ |------------------------------------------------

	//Write your own code for "sendCredentialsToServer" here. Code inside this comments will not overwrite. DON'T EDIT OR REMOVE THIS COMMENTS. 	Code: odciavmmvx

	const char* ssid_val = params["ssid"];
	const char* pwd_val = params["password"];

	Serial.print("SSID:");
	Serial.print(ssid_val);
	Serial.print(" , Password: ");
	Serial.println(pwd_val);

	int direccionSSID = 0;
	int direccionPassword = sizeof(ssid_val) + 1 ;

	int strLenSSID = strlen(ssid_val);
	int strLenPWD = strlen(pwd_val);

	EEPROM.writeString(direccionSSID, ssid_val);
  EEPROM.writeString(50, pwd_val);
	EEPROM.writeByte( 101 , 49);
  EEPROM.commit();

	Serial.print("EEPROM saved: ");
	for( int i = 0; i < 110 ; i++ )
	{
    Serial.print((char)EEPROM.read(i));
  }
	Serial.println("");
	responseCredentialsToServer();

	//End of your own code. 	Code: odciavmmvx

}


/*In Javascript add: " requestSensorsData(); " 
	to call this function in Arduino Backend. */
void requestSensorsData() {

	//-----------------------------|  Debugging print. Remove if you want.  |-----------------------------
	if (FrontendToBackendDebug) {
		Serial.println("Executing \"requestSensorsData\"");
	}
	//-----------------------------------------------| ~ |------------------------------------------------

	//Write your own code for "requestSensorsData" here. Code inside this comments will not overwrite. DON'T EDIT OR REMOVE THIS COMMENTS. 	Code: shhwmpjwlv
	struct dth_module dth_prev;
	dht_read();
	waterLevel_read();
	ds18b20_read();
	dth_prev.h = dht_getHum();
	dth_prev.t = dht_getTemp();
	float waterData = waterLevel_getValue();
	float t_ds = ds18b20_getTemp();
	String sensorInfo = "";
	sensorInfo += "\"temp\":";
	sensorInfo += String( dth_prev.t , 2);
	sensorInfo += ",\"hum\":";
	sensorInfo += String( dth_prev.h , 2);
	sensorInfo += ",\"water\":";
	float waterDatastr = map( waterData, 0, 1024*4 -1 , 0 ,100 );
	sensorInfo += String( waterDatastr , 0);
	sensorInfo += ",\"tempds\":";
	sensorInfo += String( t_ds , 2);

	respondSensorsData(sensorInfo);

	String sensorInfo2 = "";
	sensorInfo2 += "{";
	sensorInfo2 += "\"bedroomtemp\":";
	sensorInfo2 += String( dth_prev.t , 2);
	sensorInfo2 += ",\"bedroomhum\":";
	sensorInfo2 += String( dth_prev.h , 2);
	sensorInfo2 += ",\"housewater\":";
	waterDatastr = map( waterData, 0, 1023*4 -1, 0 ,100 );
	sensorInfo2 += String( waterDatastr , 0);
	sensorInfo2 += ",\"livingroomtemp\":";
	sensorInfo2 += String( t_ds , 2);
	sensorInfo2 += "}";

	publishMessage(sensorInfo2);

	//End of your own code. 	Code: shhwmpjwlv

}

/*In Javascript add: " sendBulbLigthStatus(); " 
	to call this function in Arduino Backend. */
void sendBulbLigthStatus(JsonObject params) {

	//-----------------------------|  Debugging print. Remove if you want.  |-----------------------------
	if (FrontendToBackendDebug) {
		Serial.println("Executing \"sendBulbLigthStatus\"");
	}
	//-----------------------------------------------| ~ |------------------------------------------------
	int statusBulb = -1;
	int statusFan = -1;
	int mode = -1;
	//Serial.println("Print Subscribe status");
	for (JsonPair kv : params) {
		String parmaKey = String(kv.key().c_str());
    //Serial.print(parmaKey);
		//Serial.print(" : ");
    //Serial.println(kv.value().as<const int>());
		if ( parmaKey == "bulb" ) statusBulb = params["bulb"];
		else if ( parmaKey == "fan" ) statusFan = params["fan"];
		else if ( parmaKey == "m" ) mode = params["m"];
	}
	//Serial.println("Results Json:" + String(statusBulb)+ " , " + String(statusFan) + " , " + String(mode));
	//Write your own code for "sendBulbLigthStatus" here. Code inside this comments will not overwrite. DON'T EDIT OR REMOVE THIS COMMENTS. 	Code: qrbvkdnjas
	//const int statusBulb = params["bulb"];
	//const int statusFan = params["fan"];
	//int mode = params["m"];
	if ( mode == 1 )
	{
		if ( statusBulb == 0 ) bulbLigth_OFF();
		else if (  statusBulb == 1 ) bulbLigth_ON();
		if(statusFan >= 0 && !getAllowButton())
		{
			int statusfanconvert = map(statusFan , 0, 100 , 0, 255);
			if(!getAllowButton())fanCooler_setDuty( statusfanconvert );
		}
		if(getAllowButton()){ mode = 3; setAllowButton(false); }
		struct submitStatusWeb ss = { statusBulb , statusFan , mode };		
		responseBulbLigthStatus(&ss, mode);
	}
	else if ( mode == 0 )
	{
		int readBulb = -1; 
		int readFan = -1;
		if ( statusBulb >= 0 )readBulb = bulbLigth_Read();
		if(statusFan >= 0 ){
			if(!getAllowButton()){
				int statusfanconvert = map(statusFan , 0, 100 , 0, 255);
				fanCooler_setDuty( statusfanconvert );
			}
			else {
				int statusfanconvert = fanCooler_read();
				statusFan = map(statusfanconvert , 0, 255 , 0, 100);
			}
			readFan = statusFan;
		}
		if(getAllowButton()){ mode = 2; setAllowButton(false);}
		struct submitStatusWeb ss = { readBulb , readFan , mode };
		responseBulbLigthStatus(&ss, mode);
	}


	//End of your own code. 	Code: qrbvkdnjas

}


//==================================================================================================================================
//----------------------------------------------| JSON decoder and function assigner |----------------------------------------------
//==================================================================================================================================

void executeFunction(String message, int server) {
	//Load values from this json object
	DynamicJsonDocument JSONObject(ws_json_capacity);
	Serial.print("f2b msg:");
	Serial.println(message);
	DeserializationError error = deserializeJson(JSONObject, message);
	if (error) {
		Serial.println("DeserializeJson() for f2b message failed: " + String(error.c_str()));
		return;
	}
	int functionID = JSONObject[server == 0? "LocalFunctionID" : "MQTTFunctionID"];
	JsonObject params = JSONObject["params"];
	if (functionID == 0) {	//When "sendReqOFWiFiCredentials" function is called.

		//Call of function "sendReqOFWiFiCredentials"
		sendReqOFWiFiCredentials();
	}
	else if (functionID == 1) {	//When "sendCredentialsToServer" function is called.

		//Call of function "sendCredentialsToServer"
		sendCredentialsToServer(params);
	}
	else if (functionID == 2) {	//When "requestSensorsData" function is called.

		//Call of function "requestSensorsData"
		requestSensorsData();
	}
	else if (functionID == 3) {	//When "sendBulbLigthStatus" function is called.

		//Call of function "sendBulbLigthStatus"
		sendBulbLigthStatus(params);
	}
}
