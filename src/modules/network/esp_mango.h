//This code was autogenerated by ESP Mango code generator V1.2 for "sketch_espmango" sketch at: 25-08-2024 22:20:24
//ESP Mango code generator was created by Julian D. Medina --- JulianDM1995@gmail.com - 2020 

const size_t ws_json_capacity = 10000; //If you have memory issues use this tool https://arduinojson.org/v6/assistant/ to calculate the correct size of buffer

//-------------------------------------------------------| DEBUG VARIABLES |--------------------------------------------------------

bool ServeDebug = true;
bool BackendToFrontendDebug = true;
bool FrontendToBackendDebug = true;

//==================================================================================================================================
//----------------------------------------------| MAIN ESP-MANGO FOR ARDUINO/BACKEND |----------------------------------------------
//==================================================================================================================================

//-------------------------------------------------| Common libraries and defines |-------------------------------------------------

#define ARRAY_SIZE(x) sizeof(x)/sizeof(x[0])
template<typename T, size_t N> size_t ArraySize(T(&)[N]) {
	return N;
}

#include <WebSocketsServer.h>
#include <ArduinoJson.h>
#include <ESPAsyncWebServer.h>

AsyncWebServer server(80);
WebSocketsServer websockets(81);


//--------------------------------------------| If the selected board is ESP8266 based |--------------------------------------------

#ifdef ESP8266
#include <ESP8266WiFi.h>
#include <ESP8266mDNS.h>
#include "FS.h"

void MDNSStart(String localServerName) {
	localServerName.toLowerCase();
	if (MDNS.begin(localServerName)) {
		Serial.println("MDNS responder started at: \" " + localServerName + ".local/ \"");
	} else {
		Serial.println("Error setting up MDNS responder!");
	}
	MDNS.addService("http", "tcp", 80);
}

void MDNSloop() {
	MDNS.update();
}

//---------------------------------------------| If the selected board is ESP32 based |---------------------------------------------

#elif defined(ESP32)
#include <WiFi.h>
#include <ESPmDNS.h>
#include "SPIFFS.h"

void MDNSStart(String localServerName) {
	localServerName.toLowerCase();
	const char *localServerNameChar = localServerName.c_str();
	if (MDNS.begin(localServerNameChar)) {
		Serial.println("MDNS responder started at: \" " + localServerName + ".local/ \"");
	} else {
		Serial.println("Error setting up MDNS responder!");
	}
}

void MDNSloop() {}

//-------------------------------------| If selected board is neither ESP32 nor ESP8266 based |-------------------------------------

#else
#error "Board not found"
#endif

//-----------------------------------------------| Common libraries and defines II |------------------------------------------------

void executeFunction(String message, int server);

#include "b2f.h"
#include "f2b.h"
#include "serve_files.h"

//----------------------------------------------------------| MANGO LOOP |----------------------------------------------------------
unsigned long tStartAWS = 0;

void ESPMangoLoop() {
	websockets.loop();
	MDNSloop();
	if ( millis() - tStartAWS >= 1000 )
	{
		networkLoop();
		tStartAWS = millis();
	}
}

//-------------------------------------------------------| WEBSOCKET EVENT |--------------------------------------------------------

void webSocketEvent(uint8_t num, WStype_t type, uint8_t * payload, size_t length) {

	if (type == WStype_DISCONNECTED) {

		onClientDisconnection(num);

	} else if (type == WStype_CONNECTED) {

		onClientConnection(num, payload);

	} else if (type == WStype_TEXT) {

		//Serial.printf("[%u] Received: %s\n", num, payload);
		String message = String((char*)( payload));

		if(FrontendToBackendDebug)Serial.print("\nMessage received from local server. ");
		executeFunction(message, 0);

	}
}

//---------------------------------------------------------| BEGIN SERVER |---------------------------------------------------------

void startESPMangoServer() {

	if (SPIFFS.begin()) {
		Serial.println("SPIFFS mounted correctly");
	} else {
		Serial.println("An Error has occurred while mounting SPIFFS");
		return;
	}

	startResponseFilesInSPIFFS();

	server.begin();
	websockets.begin();
	websockets.onEvent(webSocketEvent);
}

void startESPMangoServer(String localServerName) {
	startESPMangoServer();
	if (localServerName != "") {
		MDNSStart(localServerName);
	}
}

